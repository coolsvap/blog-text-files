Introduction to Docker Security Hands-On

Docker has recently made an announcement related to Docker Security which will help enhance container security which abstracts it from the infrastructure. The three key components of the Docker security are

Usable Security
Trusted Delivery
Infrastructure Independent

which will eventually result in safer apps.


In Docker, a secret is any blob of data, such as a password, SSH private key, TLS Certificate, or any other piece of data that is sensitive in nature. docker secret is the docker command for managing the secrets in Docker. It uses the built-in Certificate Authority that gets automatically created when bootstrapping a new swarm.

docker@manager1:~$ docker secret

Usage:  docker secret COMMAND

Manage Docker secrets

Options:
      --help   Print usage

Commands:
  create      Create a secret from a file or STDIN as content
  inspect     Display detailed information on one or more secrets
  ls          List secrets
  rm          Remove one or more secrets

Run 'docker secret COMMAND --help' for more information on a command.

For evaluating Docker Secrets, I reviewed the article https://blog.docker.com/2017/02/docker-secrets-management. I found we need some more steps to evaulate secrets.

You can create a key with very simple steps

docker@manager1:~$ echo "This is a secret" | docker secret create my_secret_data -
e0krhfllujxsnz6dunhrwpu2o

docker@manager1:~$ docker secret ls
ID                          NAME                CREATED             UPDATED
e0krhfllujxsnz6dunhrwpu2o   my_secret_data      15 seconds ago      15 seconds ago

The detailed secret information can be obtained as

docker@manager1:~$ docker secret inspect my_secret_data
[
    {
        "ID": "e0krhfllujxsnz6dunhrwpu2o",
        "Version": {
            "Index": 64
        },
        "CreatedAt": "2017-02-14T08:37:07.556279987Z",
        "UpdatedAt": "2017-02-14T08:37:07.556279987Z",
        "Spec": {
            "Name": "my_secret_data"
        }
    }
]

Now lets use the secret with any service

docker@manager1:~$ docker service  create --name="nginx" --secret="my_secret_data" nginx
tppk0d5azzxljeqe874m72sbt

docker@manager1:~$ docker service ls
ID            NAME   MODE        REPLICAS  IMAGE
tppk0d5azzxl  nginx  replicated  1/1       nginx:latest

Lets see which secret is actually allocated to the instance

docker@manager1:~$ docker service inspect nginx | grep -i secret
                    "Secrets": [
                                "Name": "my_secret_data",
                            "SecretID": "e0krhfllujxsnz6dunhrwpu2o",
                            "SecretName": "my_secret_data"

							
docker@manager1:~$ docker service ps nginx
ID            NAME     IMAGE         NODE     DESIRED STATE  CURRENT STATE          ERROR  PORTS
q1dwnk2bv63t  nginx.1  nginx:latest  worker1  Running        Running 2 minutes ago


Go to Worker1 and execute following

docker@worker1:~$ docker exec $(docker ps --filter name=nginx -q) ls -l /run/secrets
total 4
-r--r--r-- 1 root root 17 Feb 14 08:43 my_secret_data

Now I will scale the service to 3

docker@manager1:~$ docker service scale nginx=3
nginx scaled to 3

docker@manager1:~$ docker service ps nginx
ID            NAME     IMAGE         NODE      DESIRED STATE  CURRENT STATE           ERROR  PORTS
q1dwnk2bv63t  nginx.1  nginx:latest  worker1   Running        Running 10 minutes ago
qqdawh6ko0dm  nginx.2  nginx:latest  worker2   Running        Running 1 second ago
xbac8ucqju3s  nginx.3  nginx:latest  manager1  Running        Running 1 second ago

Now we can see the service is also running on swarm manager node as well. Lets see if it has the same secret. Execute the same command on manager node

docker@manager1:~$ docker exec $(docker ps --filter name=nginx -q) ls -l /run/secrets
total 4
-r--r--r-- 1 root root 17 Feb 14 08:53 my_secret_data

Lets try and remove the secret from the service

docker@manager1:~$ docker service update --secret-rm="my_secret_data" nginx
nginx

docker@manager1:~$ docker exec $(docker ps --filter name=nginx -q) ls -l /run/secrets
ls: cannot access /run/secrets: No such file or directory

docker@worker1:~$ docker exec $(docker ps --filter name=nginx -q) ls -l /run/secrets
ls: cannot access /run/secrets: No such file or directory

Lets now remove the service and secret we have created for evaluation

docker@manager1:~$ docker service rm nginx
nginx

docker@manager1:~$ docker secret rm my_secret_data
e0krhfllujxsnz6dunhrwpu2o
